Selection Sort Implementation in Java
This repository contains a Java implementation of the Selection Sort algorithm. Below is a detailed explanation of the code, its functionality, and how to use it.

Table of Contents
What is Selection Sort?
Code Explanation
How to Use the Code
Example Input and Output
Time Complexity
Space Complexity
Conclusion

What is Selection Sort?
Selection Sort is a simple comparison-based sorting algorithm. It works by dividing the input array into two parts:
Sorted part: Initially empty.
Unsorted part: Initially contains all the elements.
The algorithm repeatedly selects the smallest (or largest, depending on the order) element from the unsorted part and swaps it with the first unsorted element. This process continues until the entire array is sorted.

Code Explanation
1. Selection Class
Contains the Selection__Sort method, which implements the selection sort algorithm.
Parameters:
int[] array: The array to be sorted.
int n: The number of elements in the array.

How it works:
Iterates through the array to find the smallest element in the unsorted portion.
Swaps the smallest element with the first unsorted element.
Repeats the process until the entire array is sorted.

java
class Selection {
    public void Selection__Sort(int[] array, int n) {
        for (int i = 0; i < n; i++) {
            int min = i; // Assume the first unsorted element is the smallest
            for (int j = i + 1; j < n; j++) {
                if (array[min] > array[j]) {
                    min = j; // Update the index of the smallest element
                }
            }
            // Swap the smallest element with the first unsorted element
            if (i != min) {
                int temp = array[i];
                array[i] = array[min];
                array[min] = temp;
            }
        }
    }
}

2. Selection_Sort Class (Main Class)
Contains the main method, which handles user input, calls the sorting method, and displays the results.

Steps:
Prompts the user to enter the number of elements to sort.
Takes input for the array elements.
Displays the unsorted array.
Calls the Selection__Sort method to sort the array.
Displays the sorted array.

java
public class Selection_Sort {
    public static void main(String[] args) {
        int n, i;
        int[] array;
        Scanner get = new Scanner(System.in);

        System.out.println();
        // Input the number of elements
        System.out.print("Number Of Elements You Want to Sort: ");
        n = get.nextInt();

        array = new int[n]; // Initialize the array with the given size

        // Input the array elements
        System.out.println("Input Elements In An Array:---");
        for (i = 0; i < n; i++) {
            System.out.print("Enter " + (i + 1) + " Element: ");
            array[i] = get.nextInt();
        }
        System.out.println("-----------------------------------");

        // Display the unsorted array
        System.out.println("UnSorted Data Are---");
        for (i = 0; i < n; i++) {
            System.out.print(" " + array[i]);
        }
        System.out.println();
        System.out.println("-----------------------------------");

        // Sort the array using Selection Sort
        Selection obj = new Selection();
        obj.Selection__Sort(array, n);

        // Display the sorted array
        System.out.println("Data Are Sorted Using Selection Sort");
        for (i = 0; i < n; i++) {
            System.out.print(" " + array[i]);
        }
        System.out.println();
        System.out.println("-----------------------------------");
    }
}

How to Use the Code

Compile the Code:
Save the code in a file named Selection_Sort.java.
Compile the code using the command:
javac Selection_Sort.java

Run the Program:
Run the compiled program using the command:
java Selection_Sort

Input:
Enter the number of elements you want to sort.
Enter the elements one by one.

Output:
The program will display the unsorted array, sort it using Selection Sort, and then display the sorted array.
Example Input and Output

Input:
Number Of Elements You Want to Sort: 5
Input Elements In An Array:---
Enter 1 Element: 64
Enter 2 Element: 25
Enter 3 Element: 12
Enter 4 Element: 22
Enter 5 Element: 11

Output:
UnSorted Data Are---
 64 25 12 22 11
-----------------------------------
Data Are Sorted Using Selection Sort
 11 12 22 25 64
-----------------------------------

Time Complexity
Best Case: O(nÂ²) (When the array is already sorted, but the algorithm still performs comparisons.)
Average Case: O(nÂ²)
Worst Case: O(nÂ²)
Selection Sort has a time complexity of O(nÂ²) because it uses two nested loops to find the smallest element and swap it.

Space Complexity
Space Complexity: O(1) (In-place sorting algorithm, uses constant extra space.)

Conclusion
This Java program demonstrates the implementation of the Selection Sort algorithm. It is easy to understand and implement but is not efficient for large datasets due to its O(nÂ²) time complexity. It is suitable for small datasets or educational purposes.
Feel free to modify and experiment with the code! If you have any questions or suggestions, please open an issue or submit a pull request.

Happy Coding! ðŸš€

